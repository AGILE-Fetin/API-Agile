ExplicaÃ§Ã£o rÃ¡pida:

express: servidor

mongoose: conecta ao MongoDB

dotenv: para variÃ¡veis de ambiente

bcryptjs: criptografar senhas

jsonwebtoken: autenticaÃ§Ã£o com JWT

cors: permitir que o app React Native consuma a API
__________________________________________________________________________________________________________________________________

Um middleware Ã© basicamente uma funÃ§Ã£o que intercepta a requisiÃ§Ã£o (request) antes que ela chegue na rota final. Ele pode:
Modificar a requisiÃ§Ã£o (req) ou a resposta (res)
Verificar permissÃµes (autenticaÃ§Ã£o, por exemplo)
Validar dados
Fazer logs
Ou simplesmente passar para o prÃ³ximo com next()

âœ… Tipos comuns de middleware no Express
Tipo	Exemplo
Logger	morgan ou middleware prÃ³prio
Parser de JSON	express.json()
AutenticaÃ§Ã£o	Seu autenticarToken
Middleware global	app.use()
Tratamento de erros	Middleware com 4 parÃ¢metros (err)
__________________________________________________________________________________________________________________________________

IntegraÃ§Ã£o do MongoDB

Por que integrar agora:
Evita retrabalho: jÃ¡ adapta suas rotas e estrutura pro Mongo.
Testa a autenticaÃ§Ã£o real: com usuÃ¡rios salvos de verdade.
Facilita a transiÃ§Ã£o: sai dos dados mock e jÃ¡ grava/busca no banco.
VocÃª jÃ¡ tÃ¡ com tudo pronto: rotas, token, login... sÃ³ trocar o mock pelo User.find() etc.
__________________________________________________________________________________________________________________________________

routes/userRoutes.js â†’ define as rotas HTTP (o que acontece quando o front chama /api/users, por exemplo).

models/User.js â†’ define a estrutura do usuÃ¡rio no MongoDB (campos, validaÃ§Ãµes etc).
__________________________________________________________________________________________________________________________________

Plano de Rotas:

ğŸ”¹ 1. AutenticaÃ§Ã£o
POST /api/auth/login âœ… (jÃ¡ feito)

ğŸ”¹ 2. UsuÃ¡rios
GET /api/users â€” listar todos os usuÃ¡rios âœ…

GET /api/users/:id â€” buscar usuÃ¡rio por ID

POST /api/users â€” criar novo usuÃ¡rio

PUT /api/users/:id â€” atualizar usuÃ¡rio

DELETE /api/users/:id â€” remover usuÃ¡rio

ğŸ”¹ 3. AutomÃ³veis (admin.automoveis)
GET /api/automoveis â€” listar anÃºncios de automÃ³veis

GET /api/automoveis/:id â€” buscar automÃ³vel por ID

POST /api/automoveis â€” criar novo anÃºncio

PUT /api/automoveis/:id â€” atualizar anÃºncio

DELETE /api/automoveis/:id â€” remover anÃºncio

ğŸ”¹ 4. ImÃ³veis (admin.imoveis)
GET /api/imoveis

GET /api/imoveis/:id

POST /api/imoveis

PUT /api/imoveis/:id

DELETE /api/imoveis/:id

ğŸ”¹ 5. Prestadores de ServiÃ§o (admin.prestadores)
GET /api/servicos

GET /api/servicos/:id

POST /api/servicos

PUT /api/servicos/:id

DELETE /api/servicos/:id

ğŸ”¹ 6. AvaliaÃ§Ãµes (config.estrelas)
GET /api/avaliacoes

POST /api/avaliacoes

GET /api/avaliacoes/:id

ğŸ”¹ 7. NotificaÃ§Ãµes (config.notificacao)
GET /api/notificacoes/:userId

ğŸ”¹ 8. Atividades de UsuÃ¡rio (admin.user_activity)
GET /api/atividades/:userId

ğŸ”¹ 9. TransaÃ§Ãµes Financeiras (dinheiro.transiÃ§Ã£o)
GET /api/transacoes/:userId

POST /api/transacoes

